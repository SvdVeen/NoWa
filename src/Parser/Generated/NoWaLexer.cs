//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NoWaLexer.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NoWa.Parser.Generated {
using System;
using System.IO;
using System.Text;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class NoWaLexer : Lexer {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, QUOTE=2, PRODUCES=3, TERMINATOR=4, OR=5, ALPHA=6, NEWLINE=7;
	public static string[] channelNames = {
		"DEFAULT_TOKEN_CHANNEL", "HIDDEN"
	};

	public static string[] modeNames = {
		"DEFAULT_MODE"
	};

	public static readonly string[] ruleNames = {
		"UPPERCASE", "LOWERCASE", "DIGIT", "WS", "QUOTE", "PRODUCES", "TERMINATOR", 
		"OR", "ALPHA", "NEWLINE"
	};


	public NoWaLexer(ICharStream input)
	: this(input, Console.Out, Console.Error) { }

	public NoWaLexer(ICharStream input, TextWriter output, TextWriter errorOutput)
	: base(input, output, errorOutput)
	{
		Interpreter = new LexerATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	private static readonly string[] _LiteralNames = {
		null, "' '", "'''", "'='", "';'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "QUOTE", "PRODUCES", "TERMINATOR", "OR", "ALPHA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NoWaLexer.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override string[] ChannelNames { get { return channelNames; } }

	public override string[] ModeNames { get { return modeNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NoWaLexer() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}
	private static int[] _serializedATN = {
		4,0,7,51,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
		2,7,7,7,2,8,7,8,2,9,7,9,1,0,1,0,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,5,1,
		5,1,6,1,6,1,7,1,7,1,8,1,8,1,8,4,8,41,8,8,11,8,12,8,42,1,9,4,9,46,8,9,11,
		9,12,9,47,1,9,1,9,0,0,10,1,0,3,0,5,0,7,1,9,2,11,3,13,4,15,5,17,6,19,7,
		1,0,4,1,0,65,90,1,0,97,122,1,0,48,57,2,0,10,10,13,13,51,0,7,1,0,0,0,0,
		9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,
		0,0,1,21,1,0,0,0,3,23,1,0,0,0,5,25,1,0,0,0,7,27,1,0,0,0,9,29,1,0,0,0,11,
		31,1,0,0,0,13,33,1,0,0,0,15,35,1,0,0,0,17,40,1,0,0,0,19,45,1,0,0,0,21,
		22,7,0,0,0,22,2,1,0,0,0,23,24,7,1,0,0,24,4,1,0,0,0,25,26,7,2,0,0,26,6,
		1,0,0,0,27,28,5,32,0,0,28,8,1,0,0,0,29,30,5,39,0,0,30,10,1,0,0,0,31,32,
		5,61,0,0,32,12,1,0,0,0,33,34,5,59,0,0,34,14,1,0,0,0,35,36,5,124,0,0,36,
		16,1,0,0,0,37,41,3,1,0,0,38,41,3,3,1,0,39,41,3,5,2,0,40,37,1,0,0,0,40,
		38,1,0,0,0,40,39,1,0,0,0,41,42,1,0,0,0,42,40,1,0,0,0,42,43,1,0,0,0,43,
		18,1,0,0,0,44,46,7,3,0,0,45,44,1,0,0,0,46,47,1,0,0,0,47,45,1,0,0,0,47,
		48,1,0,0,0,48,49,1,0,0,0,49,50,6,9,0,0,50,20,1,0,0,0,4,0,40,42,47,1,6,
		0,0
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace NoWa.Parser.Generated
