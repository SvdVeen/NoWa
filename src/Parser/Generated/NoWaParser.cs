//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from NoWaParser.g4 by ANTLR 4.13.0

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

namespace NoWa.Parser.Generated {
using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.0")]
[System.CLSCompliant(false)]
public partial class NoWaParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		WS=1, QUOTE=2, PRODUCES=3, TERMINATOR=4, OR=5, ALPHA=6, NEWLINE=7;
	public const int
		RULE_grammar_ = 0, RULE_rule = 1, RULE_expression = 2, RULE_symbol = 3;
	public static readonly string[] ruleNames = {
		"grammar_", "rule", "expression", "symbol"
	};

	private static readonly string[] _LiteralNames = {
		null, "' '", "'''", "'='", "';'", "'|'"
	};
	private static readonly string[] _SymbolicNames = {
		null, "WS", "QUOTE", "PRODUCES", "TERMINATOR", "OR", "ALPHA", "NEWLINE"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "NoWaParser.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static NoWaParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public NoWaParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public NoWaParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Grammar_Context : ParserRuleContext {
		public RuleContext rules;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(NoWaParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext[] rule() {
			return GetRuleContexts<RuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public RuleContext rule(int i) {
			return GetRuleContext<RuleContext>(i);
		}
		public Grammar_Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_grammar_; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.EnterGrammar_(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.ExitGrammar_(this);
		}
	}

	[RuleVersion(0)]
	public Grammar_Context grammar_() {
		Grammar_Context _localctx = new Grammar_Context(Context, State);
		EnterRule(_localctx, 0, RULE_grammar_);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 9;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 8;
				_localctx.rules = rule();
				}
				}
				State = 11;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( _la==ALPHA );
			State = 13;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class RuleContext : ParserRuleContext {
		public IToken nonterminal;
		public ExpressionContext _expression;
		public IList<ExpressionContext> _exprs = new List<ExpressionContext>();
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(NoWaParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(NoWaParser.WS, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PRODUCES() { return GetToken(NoWaParser.PRODUCES, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TERMINATOR() { return GetToken(NoWaParser.TERMINATOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHA() { return GetToken(NoWaParser.ALPHA, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] OR() { return GetTokens(NoWaParser.OR); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode OR(int i) {
			return GetToken(NoWaParser.OR, i);
		}
		public RuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_rule; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.EnterRule(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.ExitRule(this);
		}
	}

	[RuleVersion(0)]
	public RuleContext rule() {
		RuleContext _localctx = new RuleContext(Context, State);
		EnterRule(_localctx, 2, RULE_rule);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 15;
			_localctx.nonterminal = Match(ALPHA);
			State = 16;
			Match(WS);
			State = 17;
			Match(PRODUCES);
			State = 18;
			Match(WS);
			State = 19;
			_localctx._expression = expression();
			_localctx._exprs.Add(_localctx._expression);
			State = 26;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 20;
					Match(WS);
					State = 21;
					Match(OR);
					State = 22;
					Match(WS);
					State = 23;
					_localctx._expression = expression();
					_localctx._exprs.Add(_localctx._expression);
					}
					} 
				}
				State = 28;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,1,Context);
			}
			State = 29;
			Match(WS);
			State = 30;
			Match(TERMINATOR);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		public SymbolContext _symbol;
		public IList<SymbolContext> _symbols = new List<SymbolContext>();
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext[] symbol() {
			return GetRuleContexts<SymbolContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public SymbolContext symbol(int i) {
			return GetRuleContext<SymbolContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(NoWaParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(NoWaParser.WS, i);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.EnterExpression(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.ExitExpression(this);
		}
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 4, RULE_expression);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 32;
			_localctx._symbol = symbol();
			_localctx._symbols.Add(_localctx._symbol);
			State = 37;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 33;
					Match(WS);
					State = 34;
					_localctx._symbol = symbol();
					_localctx._symbols.Add(_localctx._symbol);
					}
					} 
				}
				State = 39;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,2,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class SymbolContext : ParserRuleContext {
		public SymbolContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_symbol; } }
	 
		public SymbolContext() { }
		public virtual void CopyFrom(SymbolContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class EmptyStringContext : SymbolContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(NoWaParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(NoWaParser.QUOTE, i);
		}
		public EmptyStringContext(SymbolContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.EnterEmptyString(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.ExitEmptyString(this);
		}
	}
	public partial class NonterminalContext : SymbolContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHA() { return GetToken(NoWaParser.ALPHA, 0); }
		public NonterminalContext(SymbolContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.EnterNonterminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.ExitNonterminal(this);
		}
	}
	public partial class TerminalContext : SymbolContext {
		public IToken value;
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] QUOTE() { return GetTokens(NoWaParser.QUOTE); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUOTE(int i) {
			return GetToken(NoWaParser.QUOTE, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] ALPHA() { return GetTokens(NoWaParser.ALPHA); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ALPHA(int i) {
			return GetToken(NoWaParser.ALPHA, i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] WS() { return GetTokens(NoWaParser.WS); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode WS(int i) {
			return GetToken(NoWaParser.WS, i);
		}
		public TerminalContext(SymbolContext context) { CopyFrom(context); }
		[System.Diagnostics.DebuggerNonUserCode]
		public override void EnterRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.EnterTerminal(this);
		}
		[System.Diagnostics.DebuggerNonUserCode]
		public override void ExitRule(IParseTreeListener listener) {
			INoWaParserListener typedListener = listener as INoWaParserListener;
			if (typedListener != null) typedListener.ExitTerminal(this);
		}
	}

	[RuleVersion(0)]
	public SymbolContext symbol() {
		SymbolContext _localctx = new SymbolContext(Context, State);
		EnterRule(_localctx, 6, RULE_symbol);
		int _la;
		try {
			State = 50;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,4,Context) ) {
			case 1:
				_localctx = new EmptyStringContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 40;
				Match(QUOTE);
				State = 41;
				Match(QUOTE);
				}
				break;
			case 2:
				_localctx = new NonterminalContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 42;
				((NonterminalContext)_localctx).value = Match(ALPHA);
				}
				break;
			case 3:
				_localctx = new TerminalContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 43;
				Match(QUOTE);
				State = 45;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				do {
					{
					{
					State = 44;
					((TerminalContext)_localctx).value = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==WS || _la==ALPHA) ) {
						((TerminalContext)_localctx).value = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					}
					}
					State = 47;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				} while ( _la==WS || _la==ALPHA );
				State = 49;
				Match(QUOTE);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	private static int[] _serializedATN = {
		4,1,7,53,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,1,0,4,0,10,8,0,11,0,12,0,11,1,
		0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,5,1,25,8,1,10,1,12,1,28,9,1,
		1,1,1,1,1,1,1,2,1,2,1,2,5,2,36,8,2,10,2,12,2,39,9,2,1,3,1,3,1,3,1,3,1,
		3,4,3,46,8,3,11,3,12,3,47,1,3,3,3,51,8,3,1,3,0,0,4,0,2,4,6,0,1,2,0,1,1,
		6,6,54,0,9,1,0,0,0,2,15,1,0,0,0,4,32,1,0,0,0,6,50,1,0,0,0,8,10,3,2,1,0,
		9,8,1,0,0,0,10,11,1,0,0,0,11,9,1,0,0,0,11,12,1,0,0,0,12,13,1,0,0,0,13,
		14,5,0,0,1,14,1,1,0,0,0,15,16,5,6,0,0,16,17,5,1,0,0,17,18,5,3,0,0,18,19,
		5,1,0,0,19,26,3,4,2,0,20,21,5,1,0,0,21,22,5,5,0,0,22,23,5,1,0,0,23,25,
		3,4,2,0,24,20,1,0,0,0,25,28,1,0,0,0,26,24,1,0,0,0,26,27,1,0,0,0,27,29,
		1,0,0,0,28,26,1,0,0,0,29,30,5,1,0,0,30,31,5,4,0,0,31,3,1,0,0,0,32,37,3,
		6,3,0,33,34,5,1,0,0,34,36,3,6,3,0,35,33,1,0,0,0,36,39,1,0,0,0,37,35,1,
		0,0,0,37,38,1,0,0,0,38,5,1,0,0,0,39,37,1,0,0,0,40,41,5,2,0,0,41,51,5,2,
		0,0,42,51,5,6,0,0,43,45,5,2,0,0,44,46,7,0,0,0,45,44,1,0,0,0,46,47,1,0,
		0,0,47,45,1,0,0,0,47,48,1,0,0,0,48,49,1,0,0,0,49,51,5,2,0,0,50,40,1,0,
		0,0,50,42,1,0,0,0,50,43,1,0,0,0,51,7,1,0,0,0,5,11,26,37,47,50
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
} // namespace NoWa.Parser.Generated
