using Antlr4.Runtime.Misc;
using NoWa.Common;

namespace NoWa.Parser;

/// <summary>
/// Used to construct a <see cref="CFG"/> from a parsed grammar.
/// </summary>
internal class NoWaCFGListener : Generated.NoWaCFGParserBaseListener
{
    /// <summary>
    /// The grammar generated by the listener.
    /// </summary>
    internal CFG Grammar { get; } = new();

    /// <summary>
    /// Exit a parse tree produced by <see cref="Generated.NoWaCFGParser.rule"/>.
    /// 
    /// <para>Creates new <see cref="Production"/> instances and adds them to the grammar.</para>
    /// </summary>
    public override void ExitRule([NotNull] Generated.NoWaCFGParser.RuleContext context)
    {
        Nonterminal head = Nonterminal.Get(context.head.GetText());

        foreach (var prod in context._productions)
        {
            Production production = new(head);

            if (prod._symbols.Count == 0 )
            {
                production.Body.Add(EmptyString.Instance);
            }
            else
            {
                foreach (var sym in prod._symbols)
                {
                    if (sym is Generated.NoWaCFGParser.NonterminalContext nonterminal)
                    {
                        production.Body.Add(Nonterminal.Get(nonterminal.value.GetText()));
                    }
                    else if (sym is Generated.NoWaCFGParser.TerminalContext terminal)
                    {
                        production.Body.Add(Terminal.Get(terminal.value.GetText()));
                    }
                    else
                    {
                        throw new InvalidOperationException("Parsed symbol is invalid."); // This should not even be possible.
                    }
                }
            }

            Grammar.AddProduction(production);
        }
    }
}
