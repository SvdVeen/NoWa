using Antlr4.Runtime.Misc;
using NoWa.Common;
using NoWa.Common.Expressions;
using System.Globalization;

namespace NoWa.Parser;

/// <summary>
/// Used to construct a <see cref="WAG"/> from a parsed grammar.
/// </summary>
internal class NoWaWAGListener : Generated.NoWaWAGParserBaseListener
{
    /// <summary>
    /// The grammar generated by the listener.
    /// </summary>
    internal WAG Grammar { get; } = new();

    /// <summary>
    /// Exit a parse tree produced by <see cref="Generated.NoWaWAGParser.production"/>.
    /// 
    /// <para>Creates new <see cref="Production"/> instances and adds them to the grammar.</para>
    /// </summary>
    public override void ExitProduction([NotNull] Generated.NoWaWAGParser.ProductionContext context)
    {
        Nonterminal head = Nonterminal.Get(context.head.nonterminal.GetText());
        List<ISymbol> symbols = new();

        if (context.body._symbols.Count == 0)
        {
            symbols.Add(EmptyString.Instance);
        }
        else
        {
            foreach(var sym in context.body._symbols)
            {
                if (sym is Generated.NoWaWAGParser.NonterminalContext nonterminal)
                {
                    symbols.Add(Nonterminal.Get(nonterminal.value.GetText()));
                }
                else if (sym is Generated.NoWaWAGParser.TerminalContext terminal)
                {
                    symbols.Add(Terminal.Get(terminal.value.GetText()));
                }
            }
        }

        Production production = new(head, symbols);
        string? weight = context.weight?.GetText();
        if (weight != null)
        {
            if (weight[0] == '&' || weight[0] == '$' || weight[0] == '!')
            {
                production.Weight.Set(weight);
            }
            else
            {
                production.Weight.Set(double.Parse(weight.Replace(',', '.'), CultureInfo.InvariantCulture));
            }
        }

        if (context.exprs != null)
        {
            foreach (var expr in context.exprs._exprs)
            {
                string attr = expr.attr.GetText();
                string op = expr.op.GetText();
                string val = expr.val.Text.Replace(",", ".");
                production.Expressions.Add(new(attr, OperatorParser.ParseString(op), double.Parse(val, CultureInfo.InvariantCulture)));
            }
        }

        Grammar.AddProduction(production);
    }

    /// <summary>
    /// Exit a parse tree produced by <see cref="Generated.NoWaWAGParser.productionhead"/>.
    /// 
    /// <para>Creates the attributes for the nonterminals.</para>
    /// </summary>
    public override void ExitProductionhead([NotNull] Generated.NoWaWAGParser.ProductionheadContext context)
    {
        Nonterminal nonterminal = Nonterminal.Get(context.nonterminal.GetText());
        Grammar.AddNonterminal(nonterminal);

        if (context.attrs?.inheritedattrs?._attrs != null)
        {
            foreach (var attr in context.attrs.inheritedattrs._attrs)
            {
                Grammar.AddInheritedAttribute(nonterminal, attr.Text[0]);
            }
        }

        if (context.attrs?.synthesizedattrs?._attrs != null)
        {
            foreach (var attr in context.attrs.synthesizedattrs._attrs)
            {
                Grammar.AddSynthesizedAttribute(nonterminal, attr.Text[0]);
            }
        }

        if (context.attrs?.staticattrs?._attrs != null)
        {
            foreach (var attr in context.attrs.staticattrs._attrs)
            {
                Grammar.AddStaticAttribute(nonterminal, attr.Text[0]);
            }
        }
    }
}
